// import java.util.*;
// import java.util.ArrayList;

// public class Main
// {
// public static void main(String[] args) {
// ArrayList<Integer> list = new ArrayList<>();
// list.add(10);
// list.add(20);
// list.add(30);
// list.add(40);

// list.forEach(n -> System.out.println(n))
// }
// }

//list stored in hashset
// import java.util.*;
// import java.util.ArrayList;
// public class Main{
//     public static void main(String args[]){
//         ArrayList<Integer> list1 = new ArrayList<>();
//         ArrayList<Integer> list2 = new ArrayList<>();
       
//         list1.add(1);
//         list1.add(2);
//         list2.add(2);
//         list2.add(1);
       
//         Set<ArrayList> set = new HashSet<>();
       
//         set.add(list1);                                                                                                                                                                                                                                                                                                                                                                                    
//         set.add(list2);
       
//         System.out.println(set);
       
//     }
// }


// hashset
// import java.util.*;
// import java.util.ArrayList;
// public class Main{
//     public static void main(String args[]){
       
//         Set<String> set = new HashSet<>();
       
//         set.add("apple");
//         set.add("banana");
//         set.add("fruits");
//         set.add("mango");
       
//         System.out.println(set);
       
//         ArrayList<String> list = new ArrayList<>(set); // convert the set ito arraylist
//         System.out.println(list);
       
//         String[] str = set.toArray(new String[set.size()]); // convert into array
//         System.out.println(str[1]);
       
//         for(String ele : set){   // convert into loop
//             System.out.println(ele);
//         }
//     }
// }
//TreeSet
// import java.util.*;
// import java.util.ArrayList;
// public class Main{
//     public static void main(String args[]){
       
//         Set<String> ts = new TreeSet<>();
       
//         ts.add("zero");
//         ts.add("one");
//         ts.add("two");
//         ts.add("ones");
//         System.out.println(ts); // always print in asending order;
       
       
//     }
// }

//LinkedHashSet
// import java.util.*;
// import java.util.ArrayList;
// public class Main{
//     public static void main(String args[]){
       
//       LinkedHashSet<String> ls = new LinkedHashSet<>();
       
//       ls.add("a");
//       ls.add("z");
//       ls.add("d");
//       ls.add("p");
       
//       System.out.println(ls);
//       System.out.println(ls.size());
//       System.out.println(ls.remove("z")); // gives true bcoz it contain z
//       System.out.println(ls.remove("b")); // gives false bcoz it doesn't contain b
//     }
// }
       
       
       
// hashMap

// import java.util.HashMap;
// import java.util.*;
// import java.util.ArrayList;
// public class Main{
//     public static void main(String args[]){
       
//         Map <Integer, String> hm1 = new HashMap<>();
       
       
//         hm1.put(1, "apple");
//         hm1.put(2, "banana");
//         hm1.put(3, "orange");
//         hm1.put(4, "mango");
       
//         System.out.println(hm1);
       
       
//         Map<Integer,String> hm2 = new HashMap<>(hm1); // store map1 into map2
//         System.out.println(hm2.get(2));  // fetch the value by key
//         System.out.println(hm2.remove(1));
//         System.out.println(hm2);
       
       
//     }
// }

// LinkedHashMap same as hasmap but the diff is order is doesn't change
// import java.util.LinkedHashMap;
// import java.util.*;
// import java.util.ArrayList;
// public class Main{
//     public static void main(String args[]){
       
//         Map <Integer, String> hm = new LinkedHashMap<>();
       
//         hm.put(3, "this is third");
//         hm.put(2, "this is second");
//         hm.put(1, "this is first");
       
//         System.out.println(hm);
//     }
   
// }

//ConcurrentHashMap
// import java.util.concurrent.*;
// import java.util.*;
// import java.util.ArrayList;
// public class Main{
//     public static void main(String args[]){
       
//       ConcurrentHashMap<Integer, String> ch = new ConcurrentHashMap<>();
       
//       ch.put(1, "dog");
//       ch.put(2, "cat");
//       ch.put(3, "pig");
       
//       System.out.println(ch);
       
//       ch.remove(2);
       
//       System.out.println(ch);
       
//       ch.putIfAbsent(2,"lion");
//       System.out.println(ch);
       
//       ch.replace(1,"dog","cow");
//       System.out.println(ch);
       
//         ch.putIfAbsent(2,"elephant"); // it is not possible bcoz the key 2 have value alrady
//         System.out.println(ch);
       
//     }
// }
     
      // object type casting
     
// import java.util.*;

//  class a{
//     String name;
//     void method(){
       
//         System.out.println("parent class");
//     }
// }

//  class b extends a{
//     int age;
//     void method(){
       
//         System.out.println("child class");
//     }
// }

// public class Main{
//     public static void main(String args[]){
       
//         a ob1 = new b();  // upcasting
//         ob1.method();
//         ob1.name="soundarya";
//         System.out.println(ob1.name);
       
       
//       //  b ob2 = new a(); // downcasting implicity(it gives a compile tim error)
       
//                          // so another way is explicity
                         
//         b ob2 = (b)ob1;
       
//         ob2.age=22;
//         System.out.println(ob2.age);
       
//     }
// }
       
        // String buffer same for string builder
       
// import java.util.*;
// import java.util.ArrayList;
//  public class Main{
//      public static void main(String args[]){  
       
//         StringBuffer sb = new StringBuffer();
//         sb.append("hello");
//         sb.append("computer");
//         sb.insert(2,"madam"); // after the modification it delete the old object and create new object
//         sb.insert(3,"##");
       
//       // sb.replace(1,3,"^^^"); //out put : h^^^##adamllocomputer
       
//       sb.replace(1,5,"^^^");// out out:  h^^^adamllocomputer
       
//         System.out.println(sb);
//      }
// }
       
     // Exception handling  
// import java.util.*;
//  import java.util.ArrayList;
//   public class Main{
//       public static void main(String args[]){  
       
//         int a = 10;
//         int b =0;
       
//     try{
//           System.out.println(a/b);
//     }
   
//     catch(ArithmeticException e){
//         System.out.println(e.toString());
//         System.out.println(e.getMessage());
//     }
       
//       }
// }
       
       
        //abstraction implementation
       
// import java.util.*;

// abstract class MobilePhone{
//     abstract void display();

//     public void name(){
//         System.out.println("Name");
//     }
// }

// class Xiaomi extends MobilePhone{

//     @Override
//     void display() {
//         System.out.println("Xiaomi Phone Display");
//     }
// }

// class Redmi extends MobilePhone{

//     @Override
//     void display() {
//         System.out.println("Redmi Phone Display");
//     }
// }

// public class Main {
//     public static void main(String[] args) {

//         Xiaomi x = new Xiaomi();
//         x.display();

//         Redmi r = new Redmi();
//         r.display();

//         MobilePhone m = new Xiaomi();
//         //m.display();
//         MobileRepair.repair(m);
//         m = new Redmi();
//       // m.display();

//         MobileRepair.repair(m);
//     }
// }

// class MobileRepair{

//     public static void repair(MobilePhone m){
//         System.out.println("repair method");
//         m.display();
//     }
// }